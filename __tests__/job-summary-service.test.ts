/**
 * Tests for Job Summary Service
 */

import { jest } from '@jest/globals'
import * as core from '../__fixtures__/core.js'

// Spy on core methods
const infoSpy = jest.spyOn(core, 'info')
const errorSpy = jest.spyOn(core, 'error')

// Create mock summary object with proper typing
const mockSummary = {
  addHeading: jest.fn().mockReturnThis(),
  addRaw: jest.fn().mockReturnThis(),
  write: jest.fn()
}

// Mock @actions/core
jest.unstable_mockModule('@actions/core', () => ({
  ...core,
  summary: mockSummary
}))

// Import the module after mocking
let jobSummaryService: typeof import('../src/services/job-summary-service.js')

beforeAll(async () => {
  jobSummaryService = await import('../src/services/job-summary-service.js')
})

describe('Job Summary Service', () => {
  beforeEach(() => {
    jest.clearAllMocks()
    infoSpy.mockClear()
    errorSpy.mockClear()
  })

  const mockResults = [
    {
      filePath: 'test.md',
      result: {
        quality: {
          score: 85,
          grammar: { score: 90, issues: 2 },
          style_guide: { score: 88, issues: 1 },
          terminology: { score: 95, issues: 0 }
        },
        analysis: {
          clarity: {
            score: 78,
            word_count: 100,
            sentence_count: 5,
            average_sentence_length: 20,
            flesch_reading_ease: 75,
            vocabulary_complexity: 0.3,
            sentence_complexity: 0.4
          },
          tone: {
            score: 82,
            informality: 0.2,
            liveliness: 0.6,
            informality_alignment: 0.8,
            liveliness_alignment: 0.7
          }
        }
      },
      timestamp: '2024-01-15T10:30:00Z'
    },
    {
      filePath: 'example.md',
      result: {
        quality: {
          score: 75,
          grammar: { score: 85, issues: 1 },
          style_guide: { score: 80, issues: 2 },
          terminology: { score: 88, issues: 1 }
        },
        analysis: {
          clarity: {
            score: 72,
            word_count: 80,
            sentence_count: 4,
            average_sentence_length: 18,
            flesch_reading_ease: 70,
            vocabulary_complexity: 0.4,
            sentence_complexity: 0.5
          },
          tone: {
            score: 78,
            informality: 0.3,
            liveliness: 0.5,
            informality_alignment: 0.7,
            liveliness_alignment: 0.6
          }
        }
      },
      timestamp: '2024-01-15T10:35:00Z'
    }
  ] as import('../src/types/index.js').AnalysisResult[]

  const mockConfig = {
    dialect: 'american_english',
    tone: 'formal',
    styleGuide: 'ap'
  }

  describe('createJobSummary', () => {
    it('should create job summary with results', async () => {
      await jobSummaryService.createJobSummary(
        mockResults,
        mockConfig,
        'workflow_dispatch'
      )

      expect(mockSummary.addRaw).toHaveBeenCalledWith(
        expect.stringContaining('# 🔍 Analysis Results')
      )
      expect(mockSummary.addRaw).toHaveBeenCalledWith(
        expect.stringContaining(
          'This summary was automatically generated by the Markup AI GitHub Action for **workflow_dispatch** event.'
        )
      )
      expect(mockSummary.addRaw).toHaveBeenCalledWith(
        expect.stringContaining(
          '| File | Quality | Grammar | Style Guide | Terminology | Clarity | Tone |'
        )
      )
      expect(mockSummary.addRaw).toHaveBeenCalledWith(
        expect.stringContaining('test.md')
      )
      expect(mockSummary.addRaw).toHaveBeenCalledWith(
        expect.stringContaining('example.md')
      )
      expect(mockSummary.addRaw).toHaveBeenCalledWith(
        expect.stringContaining('## 📊 Summary')
      )
      expect(mockSummary.write).toHaveBeenCalled()
      expect(infoSpy).toHaveBeenCalledWith(
        '✅ Job summary created successfully'
      )
    })

    it('should handle empty results', async () => {
      await jobSummaryService.createJobSummary([], mockConfig, 'schedule')

      expect(mockSummary.addHeading).toHaveBeenCalledWith('🔍 Analysis Results')
      expect(mockSummary.addRaw).toHaveBeenCalledWith('No files were analyzed.')
      expect(mockSummary.write).toHaveBeenCalled()
    })

    it('should handle errors gracefully', async () => {
      const error = new Error('Summary creation failed')
      const mockWrite = mockSummary.write as jest.MockedFunction<
        () => Promise<void>
      >
      mockWrite.mockRejectedValue(error)

      await jobSummaryService.createJobSummary(
        mockResults,
        mockConfig,
        'workflow_dispatch'
      )

      expect(errorSpy).toHaveBeenCalledWith(
        'Failed to create job summary: Error: Summary creation failed'
      )
    })

    it('should include configuration details', async () => {
      await jobSummaryService.createJobSummary(
        mockResults,
        mockConfig,
        'schedule'
      )

      expect(mockSummary.addRaw).toHaveBeenCalledWith(
        expect.stringContaining(
          '*Configuration: Dialect: american_english | Tone: formal | Style Guide: ap*'
        )
      )
    })

    it('should include quality score legend', async () => {
      await jobSummaryService.createJobSummary(
        mockResults,
        mockConfig,
        'workflow_dispatch'
      )

      expect(mockSummary.addRaw).toHaveBeenCalledWith(
        expect.stringContaining(
          '*Quality Score Legend: 🟢 80+ | 🟡 60-79 | 🔴 0-59*'
        )
      )
    })
  })
})
