/**
 * PR Comment service for managing comments on pull requests
 */

import * as core from '@actions/core'
import * as github from '@actions/github'
import { AnalysisResult, AnalysisOptions } from '../types/index.js'
import { generateAnalysisContent } from '../utils/markdown-utils.js'
import { handleGitHubError, logError } from '../utils/error-utils.js'

/**
 * Interface for PR comment data
 */
export interface PRCommentData {
  owner: string
  repo: string
  prNumber: number
  results: AnalysisResult[]
  config: AnalysisOptions
  eventType: string
}

/**
 * Generate complete comment body
 */
function generateCommentBody(
  results: AnalysisResult[],
  config: AnalysisOptions,
  eventType: string
): string {
  const header = `## üîç Analysis Results

This comment was automatically generated by the Markup AI GitHub Action for **${eventType}** event.`

  return generateAnalysisContent(results, config, header, eventType)
}

/**
 * Find existing  comment on PR
 */
async function findExistingComment(
  octokit: ReturnType<typeof github.getOctokit>,
  owner: string,
  repo: string,
  prNumber: number
): Promise<number | null> {
  try {
    const response = await octokit.rest.issues.listComments({
      owner,
      repo,
      issue_number: prNumber
    })

    const comment = response.data.find((comment) =>
      comment.body?.includes('## üîç Analysis Results')
    )

    return comment?.id || null
  } catch (error) {
    core.warning(`Failed to find existing comment: ${error}`)
    return null
  }
}

/**
 * Create or update PR comment with analysis results
 */
export async function createOrUpdatePRComment(
  octokit: ReturnType<typeof github.getOctokit>,
  commentData: PRCommentData
): Promise<void> {
  const { owner, repo, prNumber, results, config } = commentData

  try {
    // Check if we have permission to comment on PRs
    try {
      await octokit.rest.repos.get({
        owner,
        repo
      })
    } catch (error: unknown) {
      const githubError = error as { status?: number }
      if (githubError.status === 403) {
        core.error(
          '‚ùå Permission denied: Cannot access repository. Make sure the GitHub token has "pull-requests: write" permission.'
        )
        return
      }
      throw error
    }

    const commentBody = generateCommentBody(
      results,
      config,
      commentData.eventType
    )
    const existingCommentId = await findExistingComment(
      octokit,
      owner,
      repo,
      prNumber
    )

    if (existingCommentId) {
      // Update existing comment
      await octokit.rest.issues.updateComment({
        owner,
        repo,
        comment_id: existingCommentId,
        body: commentBody
      })
      core.info(`‚úÖ Updated existing comment on PR #${prNumber}`)
    } else {
      // Create new comment
      await octokit.rest.issues.createComment({
        owner,
        repo,
        issue_number: prNumber,
        body: commentBody
      })
      core.info(`‚úÖ Created new comment on PR #${prNumber}`)
    }
  } catch (error: unknown) {
    const githubError = handleGitHubError(error, 'Create/update PR comment')

    if (githubError.status === 403) {
      core.error(
        '‚ùå Permission denied: Cannot create or update comments on pull requests.'
      )
      core.error(
        'Please ensure the GitHub token has "pull-requests: write" permission.'
      )
    } else if (githubError.status === 404) {
      core.error(
        '‚ùå Pull request not found. Make sure the PR exists and is accessible.'
      )
    } else {
      logError(githubError, 'Failed to create/update PR comment')
    }
  }
}

/**
 * Check if current event is a pull request
 */
export function isPullRequestEvent(): boolean {
  return github.context.eventName === 'pull_request'
}

/**
 * Get PR number from context
 */
export function getPRNumber(): number | null {
  if (github.context.eventName === 'pull_request') {
    return github.context.issue.number
  }
  return null
}
